name: Test Module

on:
  pull_request:
    paths:
      - '*.tf'
      - 'tests/**'
      - 'examples/**'
      - '.github/workflows/terraform-test.yml'
  workflow_dispatch:

env:
  AWS_REGION: 'ap-southeast-1'
  TF_VERSION: '1.6.0'
  GO_VERSION: '1.21'

jobs:
  validate:
    name: Validate Terraform
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Format Check
        run: terraform fmt -check -recursive

      - name: Terraform Init (Main Module)
        run: terraform init -backend=false

      - name: Terraform Validate (Main Module)
        run: terraform validate

      - name: Terraform Init (Test Example)
        run: |
          cd examples/domain-verification
          terraform init -backend=false
          cd ../email-verification
          terraform init -backend=false

      - name: Terraform Validate (Test Example)
        run: |
          cd examples/domain-verification
          terraform validate
          cd ../email-verification
          terraform validate

  lint:
    name: Lint Go Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Download Go Dependencies
        run: |
          cd tests
          go mod download

      - name: Run Go Lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: latest
          working-directory: tests

  test:
    name: Run Full Test Suite
    runs-on: ubuntu-latest
    needs: [validate, lint]
    environment: testing
    timeout-minutes: 60

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download Go Dependencies
        run: |
          cd tests
          go mod download

      - name: Run integration tests with reporting
        id: test
        working-directory: ./tests
        run: |
          echo "Running Terraform integration tests with reporting..."
          go test -v -timeout 30m -report -report-file=test-report.json -html-file=test-report.html
          TEST_EXIT_CODE=$?
          
          # Save test results for PR comment
          if [ -f test-results.json ]; then
            echo "test_results<<EOF" >> $GITHUB_OUTPUT
            cat test-results.json >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi
          
          # Save summary for PR comment
          if [ -f test-summary.md ]; then
            echo "test_summary<<EOF" >> $GITHUB_OUTPUT
            cat test-summary.md >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi
          
          exit $TEST_EXIT_CODE
          
      - name: Upload test reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: |
            tests/test-report.json
            tests/test-report.html
            tests/test-summary.md
            
      - name: Comment PR with test results
        if: always() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const summary = `${{ steps.test.outputs.test_summary }}`;
            
            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('ðŸ§ª Terraform AWS SES Test Results')
            );
            
            const commentBody = summary || '## ðŸ§ª Terraform AWS SES Test Results\n\nTest report generation failed. Please check the workflow logs.';
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody,
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody,
              });
            }
          